/* Auto-generated by genmsg_cpp for file /home/miguelolivaresmendez/code/fuerte_workspace/sandbox/aruco/msg/marker_info.msg */
#ifndef ARUCO_MESSAGE_MARKER_INFO_H
#define ARUCO_MESSAGE_MARKER_INFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace aruco
{
template <class ContainerAllocator>
struct marker_info_ {
  typedef marker_info_<ContainerAllocator> Type;

  marker_info_()
  : numberOfMarkers(0)
  , id()
  , area()
  , perimeter()
  , centerX()
  , centerY()
  , rotX()
  , rotY()
  , rotZ()
  , distance()
  , trsX()
  , trsY()
  {
  }

  marker_info_(const ContainerAllocator& _alloc)
  : numberOfMarkers(0)
  , id(_alloc)
  , area(_alloc)
  , perimeter(_alloc)
  , centerX(_alloc)
  , centerY(_alloc)
  , rotX(_alloc)
  , rotY(_alloc)
  , rotZ(_alloc)
  , distance(_alloc)
  , trsX(_alloc)
  , trsY(_alloc)
  {
  }

  typedef int8_t _numberOfMarkers_type;
  int8_t numberOfMarkers;

  typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _id_type;
  std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  id;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _area_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  area;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _perimeter_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  perimeter;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _centerX_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  centerX;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _centerY_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  centerY;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rotX_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  rotX;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rotY_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  rotY;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rotZ_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  rotZ;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _distance_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  distance;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _trsX_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  trsX;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _trsY_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  trsY;


  typedef boost::shared_ptr< ::aruco::marker_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco::marker_info_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct marker_info
typedef  ::aruco::marker_info_<std::allocator<void> > marker_info;

typedef boost::shared_ptr< ::aruco::marker_info> marker_infoPtr;
typedef boost::shared_ptr< ::aruco::marker_info const> marker_infoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aruco::marker_info_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aruco::marker_info_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aruco

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aruco::marker_info_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aruco::marker_info_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aruco::marker_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e5991c0caab369f6cfa37dfa3bc945ad";
  }

  static const char* value(const  ::aruco::marker_info_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe5991c0caab369f6ULL;
  static const uint64_t static_value2 = 0xcfa37dfa3bc945adULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco::marker_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aruco/marker_info";
  }

  static const char* value(const  ::aruco::marker_info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aruco::marker_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 numberOfMarkers\n\
int8[] id\n\
float32[] area\n\
float32[] perimeter\n\
float32[] centerX\n\
float32[] centerY\n\
float32[] rotX\n\
float32[] rotY\n\
float32[] rotZ\n\
float32[] distance\n\
float32[] trsX\n\
float32[] trsY\n\
";
  }

  static const char* value(const  ::aruco::marker_info_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aruco::marker_info_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.numberOfMarkers);
    stream.next(m.id);
    stream.next(m.area);
    stream.next(m.perimeter);
    stream.next(m.centerX);
    stream.next(m.centerY);
    stream.next(m.rotX);
    stream.next(m.rotY);
    stream.next(m.rotZ);
    stream.next(m.distance);
    stream.next(m.trsX);
    stream.next(m.trsY);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct marker_info_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco::marker_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aruco::marker_info_<ContainerAllocator> & v) 
  {
    s << indent << "numberOfMarkers: ";
    Printer<int8_t>::stream(s, indent + "  ", v.numberOfMarkers);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "area[]" << std::endl;
    for (size_t i = 0; i < v.area.size(); ++i)
    {
      s << indent << "  area[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.area[i]);
    }
    s << indent << "perimeter[]" << std::endl;
    for (size_t i = 0; i < v.perimeter.size(); ++i)
    {
      s << indent << "  perimeter[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.perimeter[i]);
    }
    s << indent << "centerX[]" << std::endl;
    for (size_t i = 0; i < v.centerX.size(); ++i)
    {
      s << indent << "  centerX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.centerX[i]);
    }
    s << indent << "centerY[]" << std::endl;
    for (size_t i = 0; i < v.centerY.size(); ++i)
    {
      s << indent << "  centerY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.centerY[i]);
    }
    s << indent << "rotX[]" << std::endl;
    for (size_t i = 0; i < v.rotX.size(); ++i)
    {
      s << indent << "  rotX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotX[i]);
    }
    s << indent << "rotY[]" << std::endl;
    for (size_t i = 0; i < v.rotY.size(); ++i)
    {
      s << indent << "  rotY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotY[i]);
    }
    s << indent << "rotZ[]" << std::endl;
    for (size_t i = 0; i < v.rotZ.size(); ++i)
    {
      s << indent << "  rotZ[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotZ[i]);
    }
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distance[i]);
    }
    s << indent << "trsX[]" << std::endl;
    for (size_t i = 0; i < v.trsX.size(); ++i)
    {
      s << indent << "  trsX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trsX[i]);
    }
    s << indent << "trsY[]" << std::endl;
    for (size_t i = 0; i < v.trsY.size(); ++i)
    {
      s << indent << "  trsY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trsY[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARUCO_MESSAGE_MARKER_INFO_H

